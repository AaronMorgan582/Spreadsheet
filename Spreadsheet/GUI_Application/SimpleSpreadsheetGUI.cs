/// <summary>
/// 
/// Author:    Aaron Morgan and Xavier Davis
/// Partner:   None
/// Date:      2/28/2020
/// Course:    CS 3500, University of Utah, School of Computing 
/// Copyright: CS 3500, Aaron Morgan and Xavier Davis
/// 
/// We, Aaron Morgan and Xavier Davis, certify that we wrote this code from scratch and did not copy it in part
/// or in whole from another source, with the exception of the original starter code, which was provided by:
/// 
///   Original Author: Joe Zachary
///   Further Authors: H. James de St. Germain
///   
///   Dates          : 2012-ish - Original 
///                    2020     - Updated for use with ASP Core
///                    
///   This code represents a Windows Form element for a Spreadsheet. It includes
///   a Menu Bar with two operations (close/new) as well as the GRID of the spreadsheet.
///   The GRID is a separate class found in SpreadsheetGridWidget
///   
///   This code represents manual elements added to the GUI as well as the ability
///   to show a pop up of information, and the event handlers for a New window and to Close the window.
///
///   See the SimpleSpreadsheetGUIExample.Designer.cs for "auto-generated" code.
///   
///   This code relies on the SpreadsheetGridWidget "widget"
///  
/// </summary>

using SpreadsheetGrid_Framework;
using SS;
using System;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using SpreadsheetUtilities;
using System.ComponentModel;
using System.Threading;
using System.Diagnostics;
using Timer = System.Windows.Forms.Timer;

namespace CS3500_Spreadsheet_GUI_Example
{
    public partial class SimpleSpreadsheetGUI : Form
    {
        AbstractSpreadsheet spreadsheet;

        //A string array is used for a given (x, y) point in the given Spreadsheet Grid; the "x" value needs to correspond to a letter. 
        string[] letters = new string[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
        private string saveFilePath;

        //A Dictionary is used to map a given (x, y) point to a specific cell name (e.g. Point (0, 0) is mapped to A1).
        private Dictionary<Point, string> coordSystem;

        private string input; //Textbox input.

        //An IEnumerable is used to store the list of dependencies of any given cell, which needs to be used to update dependent cells.
        private IEnumerable<string> dependencies;
        private Timer timer;
        private Timer labelTimer;

        public SimpleSpreadsheetGUI()
        {
            this.grid_widget = new SpreadsheetGridWidget();
            coordSystem = new Dictionary<Point, string>();
            spreadsheet = new Spreadsheet(s => true, s => s.ToUpper(), "six");
            labelTimer = new Timer();
            // Call the AutoGenerated code
            InitializeComponent();

            //Start a timer for Auto-Save.
            timer = new Timer();
            timer.Interval = 30_000; //30 seconds defined for the interval.
            timer.Enabled = true;
            timer.Tick += new System.EventHandler(AutoSave);

            // Add event handler and select a start cell
            grid_widget.SelectionChanged += DisplaySelection;
            grid_widget.SetSelection(0, 0, false);
        }

        //
        //Events
        //

        /// <summary>
        /// Given a spreadsheet, find the current selected cell and
        /// create a popup that contains the information from that cell
        /// </summary>
        /// <param name="ss"></param>
        private void DisplaySelection(SpreadsheetGridWidget ss)
        {
            int row, col;
            ss.GetSelection(out col, out row);

            string name = letters[col] + (row + 1);//Row+1 is necessary since the grid starts at (0,0), but the cell names start at A1

            //If the user clicks on a cell, add that cell to the Dictionary that maps the grid (x,y) to its proper "letter/number" name.
            Point coordinate = new Point(col, row);
            if (!coordSystem.ContainsKey(coordinate))
            {
                coordSystem.Add(coordinate, name);
            }

            //Cell contents are displayed in the textbox when the user selects the cell.
            Input_Textbox.Text = spreadsheet.GetCellContents(name).ToString();
        }

        //Event when "File -> New" is clicked.
        private void NewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            Spreadsheet_Window.getAppContext().RunForm(new SimpleSpreadsheetGUI());
        }

        //Event when "File -> Open" is clicked.
        private void OpenMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                OpenFileDialog open = new OpenFileDialog();
                open.Filter = "Spreadsheet Files (*.sprd) | *.sprd |All files (*.*) | *.*";

                if (open.ShowDialog() == DialogResult.OK)
                {
                    string file = open.FileName;
                    this.spreadsheet = new Spreadsheet(file, s => true, s => s.ToUpper(), "six");
                    this.grid_widget.Clear();

                    //If the spreadsheet has been saved, then there should be cells used, which need to be gathered to fill in to the new spreadsheet.
                    IEnumerable<string> usedCells = spreadsheet.GetNamesOfAllNonemptyCells();
                    GetCellCoordsAndSet(usedCells);

                    //The given file that was opened is now the new saveFilePath for the spreadsheet GUI.
                    saveFilePath = file;

                    spreadsheet.Save(saveFilePath);
                }
            }
            catch (SpreadsheetReadWriteException)
            {
                MessageBox.Show("Invalid file type.");
            }

        }

        // Event when "File -> Close" is clicked.
        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        // Event when "File -> Save As..." is clicked.
        private void SaveAsMenuItem_Click(object sender, EventArgs e)
        {
            Save();
        }


        // Event when the "Help" button is clicked.
        private void HelpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("To edit a cell, click on the desired cell and then enter information via the textbox, " +
                "then press the 'Enter' key to set it within the grid." +

                "\n\nFor formulas: \n   Begin with '=' followed by the formula." +

                "\n\nAdditional Features:" +
                "\n   Autosave is implemented to run every 30 seconds, if the spreadsheet has been" +
                "\n   previously saved.", "Help Menu");
        }

        //Event when the spreadsheet GUI is closed, whether it's closed by "File -> Close" or via the close "X".
        private void SimpleSpreadsheetGUI_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (spreadsheet.Changed)
            {
                if (MessageBox.Show("Do you want to save changes to your spreadsheet?", "Unsaved Changes", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    e.Cancel = true;
                    Save();
                }
                else
                { e.Cancel = false; }
            }
        }

        /// <summary>
        /// Example of how to use a button
        /// </summary>
        /// <param name="sender"> not used </param>
        /// <param name="e"> not used </param>
        private void Save_Button_Click(object sender, EventArgs e)
        {
            if (saveFilePath != null)
            {
                spreadsheet.Save(saveFilePath);
                MessageBox.Show("Saved.");
            }
            else
            {
                Save(); ;
            }
        }

        private void Input_Textbox_KeyPress(object sender, KeyPressEventArgs e)
        {
            TextBox box = sender as TextBox;
            if (e.KeyChar == (char)Keys.Return)
            {
                input = box.Text;
                bg_worker.RunWorkerAsync();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void AutoSave(object sender, EventArgs e)
        {
            if (saveFilePath != null)
            {
                autoSaveLabel.Visible = true;
                spreadsheet.Save(saveFilePath);
                labelTimer.Interval = 2_000; // it will Tick in 2 seconds
                labelTimer.Tick += WriteLabel;
                labelTimer.Start();
            }
        }

        private void WriteLabel(object sender, EventArgs e)
        {
            autoSaveLabel.Visible = false;
            labelTimer.Stop();
        }

        //
        //Background Worker Events
        //

        private void SetCell(object sender, DoWorkEventArgs e)
        {
            int col, row;
            grid_widget.GetSelection(out col, out row);
            Point coordinate = new Point(col, row);
            string cellName = letters[col] + (row + 1);

            if (!coordSystem.ContainsKey(coordinate))
            {
                coordSystem.Add(coordinate, cellName);
            }
            try
            {
                dependencies = spreadsheet.SetContentsOfCell(coordSystem[coordinate], input);
                e.Result = spreadsheet.GetCellValue(coordSystem[coordinate].ToString());
            }
            catch (FormulaFormatException)
            {
                MessageBox.Show("Invalid formula format.");
            }
            catch (CircularException)
            {
                MessageBox.Show("Circular Dependency found.");
            }


        }

        private void SetCellDone(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Result != null)
            {
                int col, row;
                grid_widget.GetSelection(out col, out row);
                grid_widget.SetValue(col, row, e.Result.ToString());

                GetCellCoordsAndSet(dependencies);
            }
        }

        //
        //Private helper methods.
        //


        /// <summary>
        /// A private helper method that converts the spreadsheet's used cells into an (x, y) point.
        /// </summary>
        /// <param name="usedCells">The list of non-empty cells in the spreadsheet.</param>
        private void GetCellCoordsAndSet(IEnumerable<string> usedCells)
        {
            Regex alphabet = new Regex(@"([a-zA-Z]+)(\d+)");
            foreach (string dependent in usedCells)
            {
                string[] cellNameSeparated = alphabet.Split(dependent);
                int gridCol = Array.IndexOf(letters, cellNameSeparated[1]);
                int gridRow = Int32.Parse(cellNameSeparated[2]);
                this.grid_widget.SetValue(gridCol, gridRow - 1, spreadsheet.GetCellValue(dependent).ToString());
            }
        }

        /// <summary>
        /// A private helper method that initiates a SaveFileDialog box to save the spreadsheet.
        /// </summary>
        private void Save()
        {
            SaveFileDialog save = new SaveFileDialog();
            save.Filter = "Spreadsheet Files (*.sprd) | *.sprd |All files (*.*) | *.*";
            if (save.ShowDialog() == DialogResult.OK)
            {
                spreadsheet.Save(save.FileName);
                saveFilePath = save.FileName;
            }
        }

    }
}
