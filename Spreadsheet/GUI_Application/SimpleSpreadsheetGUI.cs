/// <summary>
///   Original Author: Joe Zachary
///   Further Authors: H. James de St. Germain
///   
///   Dates          : 2012-ish - Original 
///                    2020     - Updated for use with ASP Core
///                    
///   This code represents a Windows Form element for a Spreadsheet. It includes
///   a Menu Bar with two operations (close/new) as well as the GRID of the spreadsheet.
///   The GRID is a separate class found in SpreadsheetGridWidget
///   
///   This code represents manual elements added to the GUI as well as the ability
///   to show a pop up of information, and the event handlers for a New window and to Close the window.
///
///   See the SimpleSpreadsheetGUIExample.Designer.cs for "auto-generated" code.
///   
///   This code relies on the SpreadsheetPanel "widget"
///  
/// </summary>

using SpreadsheetGrid_Framework;
using SS;
using System;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace CS3500_Spreadsheet_GUI_Example
{
    public partial class SimpleSpreadsheetGUI : Form
    {
        AbstractSpreadsheet spreadsheet;
        string[] letters = new string[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
        private string saveFilePath;
        private Dictionary<Point, string> coordSystem;

        public SimpleSpreadsheetGUI()
        {
            this.grid_widget = new SpreadsheetGridWidget();
            coordSystem = new Dictionary<Point, string>();
            spreadsheet = new Spreadsheet(s => true, s => s.ToUpper(), "six");

            // Call the AutoGenerated code
            InitializeComponent();

            // Add event handler and select a start cell
            grid_widget.SelectionChanged += DisplaySelection;
            grid_widget.SetSelection(0, 0, false);

        }

        public SimpleSpreadsheetGUI(string filename)
        {
            this.grid_widget = new SpreadsheetGridWidget();

            coordSystem = new Dictionary<Point, string>();
            spreadsheet = spreadsheet = new Spreadsheet(filename, s => true, s => s.ToUpper(), "six");

            IEnumerable<string> usedCells = spreadsheet.GetNamesOfAllNonemptyCells();
            Regex alphabet = new Regex("[a-zA-Z]");
            foreach (string cell in usedCells)
            {
                string[] cellChars = alphabet.Split(cell);
                int row = Array.IndexOf(letters, cellChars[0]);
                int col = Int32.Parse(cellChars[1]);
                grid_widget.SetValue(col, row, spreadsheet.GetCellValue(cell).ToString());
            }

            saveFilePath = filename;

            // Call the AutoGenerated code
            InitializeComponent();

            // Add event handler and select a start cell
            grid_widget.SelectionChanged += DisplaySelection;
            grid_widget.SetSelection(0, 0, false);

        }

        /// <summary>
        /// Given a spreadsheet, find the current selected cell and
        /// create a popup that contains the information from that cell
        /// </summary>
        /// <param name="ss"></param>
        private void DisplaySelection(SpreadsheetGridWidget ss)
        {
            int row, col;

            string value;
            ss.GetSelection(out col, out row);
            ss.GetValue(col, row, out value);

            string name = letters[col] + (row + 1);
            Point coordinate = new Point(col, row);
            if (!coordSystem.ContainsKey(coordinate))
            {
                coordSystem.Add(coordinate, name);
            }
            sample_textbox.Text = spreadsheet.GetCellContents(name).ToString();

        }

        // Deals with the New menu
        private void NewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Tell the application context to run the form on the same
            // thread as the other forms.
            Spreadsheet_Window.getAppContext().RunForm(new SimpleSpreadsheetGUI());
        }

        private void openMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog open = new OpenFileDialog();
            open.Filter = "Spreadsheet Files (*.sprd) | *.sprd |All files (*.*) | *.*";
            if (open.ShowDialog() == DialogResult.OK)
            {
                string file = open.FileName;
                this.spreadsheet = new Spreadsheet(file, s => true, s => s.ToUpper(), "six");
                this.grid_widget.Clear();

                IEnumerable<string> usedCells = spreadsheet.GetNamesOfAllNonemptyCells();
                Regex alphabet = new Regex("[a-zA-Z]");
                foreach (string cell in usedCells)
                {
                    string[] cellChars = alphabet.Split(cell);
                    int row = Array.IndexOf(letters, cellChars[0]);
                    int col = Int32.Parse(cellChars[1]);
                    this.grid_widget.SetValue(col, row, spreadsheet.GetCellValue(cell).ToString());
                }

                saveFilePath = file;
            }
        }

        // Deals with the Close menu
        private void CloseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void saveAsMenuItem_Click(object sender, EventArgs e)
        {
            Save();
        }

        private void Save()
        {
            SaveFileDialog save = new SaveFileDialog();
            save.Filter = "Spreadsheet Files (*.sprd) | *.sprd |All files (*.*) | *.*";
            if (save.ShowDialog() == DialogResult.OK)
            {
                spreadsheet.Save(save.FileName);
                saveFilePath = save.FileName;
            }
        }

        /// <summary>
        /// Example of how to use a button
        /// </summary>
        /// <param name="sender"> not used </param>
        /// <param name="e"> not used </param>
        private void sample_button_Click(object sender, EventArgs e)
        {
            if (saveFilePath != null)
            {
                spreadsheet.Save(saveFilePath);
                MessageBox.Show("Saved.");
            }
            else
            { Save(); }
        }

        /// <summary>
        /// Textbox handler
        /// </summary>
        /// <param name="sender"> the textbox </param>
        /// <param name="e">not used</param>
        private void sample_textbox_TextChanged(object sender, EventArgs e)
        {
            TextBox box = sender as TextBox;
            int col, row;
            string value;

            grid_widget.GetSelection(out col, out row);
            grid_widget.GetValue(col, row, out value);

            grid_widget.SetValue(col, row, box.Text);
        }

        private void sample_textbox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                SetCell(sender);
            }
        }

        private void SetCell(object sender)
        {
            TextBox box = sender as TextBox;

            int col, row;
            grid_widget.GetSelection(out col, out row);
            Point coordinate = new Point(col, row);
            string cellName = letters[col] + (row + 1);
            if (!coordSystem.ContainsKey(coordinate))
            {
                coordSystem.Add(coordinate, cellName);
            }
            spreadsheet.SetContentsOfCell(coordSystem[coordinate], box.Text);
            grid_widget.SetValue(col, row, spreadsheet.GetCellValue(coordSystem[coordinate]).ToString());
        }

        private void grid_widget_MouseClick(object sender, MouseEventArgs e)
        {
            MessageBox.Show("ANGRY LEMON");
        }

        private void SimpleSpreadsheetGUI_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (spreadsheet.Changed)
            {
                if (MessageBox.Show("Do you want to save changes to your spreadsheet?", "Unsaved Changes", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    e.Cancel = true;
                    Save();
                }
                else
                { e.Cancel = false; }
            }
        }

        private void helpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("To edit a cell, click on the desired cell and then enter information via the textbox." +
                "\n\nFor formulas: \n   Begin with '=' followed by the equation. \n   To calculate after equation has been entered, " +
                "press 'Enter' or click on \n   another cell." +
                "\n\nAdditional Features:" +
                "\n   Dark Mode" +
                "\n   Autosave", "Help Menu");
        }

    }
}
